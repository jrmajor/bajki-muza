CREATE TABLE IF NOT EXISTS "migrations" ("id" integer primary key autoincrement not null, "migration" varchar not null, "batch" integer not null);
CREATE TABLE IF NOT EXISTS "users" ("id" integer primary key autoincrement not null, "username" varchar not null, "password" varchar not null, "remember_token" varchar);
CREATE TABLE IF NOT EXISTS "telescope_entries" ("sequence" integer primary key autoincrement not null, "uuid" varchar not null, "batch_id" varchar not null, "family_hash" varchar, "should_display_on_index" tinyint(1) not null default '1', "type" varchar not null, "content" text not null, "created_at" datetime);
CREATE UNIQUE INDEX "telescope_entries_uuid_unique" on "telescope_entries" ("uuid");
CREATE INDEX "telescope_entries_batch_id_index" on "telescope_entries" ("batch_id");
CREATE INDEX "telescope_entries_family_hash_index" on "telescope_entries" ("family_hash");
CREATE INDEX "telescope_entries_created_at_index" on "telescope_entries" ("created_at");
CREATE INDEX "telescope_entries_type_should_display_on_index_index" on "telescope_entries" ("type", "should_display_on_index");
CREATE TABLE IF NOT EXISTS "telescope_entries_tags" ("entry_uuid" varchar not null, "tag" varchar not null, foreign key("entry_uuid") references "telescope_entries"("uuid") on delete cascade, primary key ("entry_uuid", "tag"));
CREATE INDEX "telescope_entries_tags_tag_index" on "telescope_entries_tags" ("tag");
CREATE TABLE IF NOT EXISTS "telescope_monitoring" ("tag" varchar not null, primary key ("tag"));
CREATE TABLE IF NOT EXISTS "tales_actors" ("id" integer primary key autoincrement not null, "artist_id" integer not null, "tale_id" integer not null, "characters" varchar, "credit_nr" integer, "created_at" datetime, "updated_at" datetime, foreign key("artist_id") references "artists"("id") on delete restrict, foreign key("tale_id") references "tales"("id") on delete restrict);
CREATE TABLE IF NOT EXISTS "failed_jobs" ("id" integer primary key autoincrement not null, "connection" text not null, "queue" text not null, "payload" text not null, "exception" text not null, "failed_at" datetime not null default CURRENT_TIMESTAMP);
CREATE TABLE IF NOT EXISTS "credits" ("id" integer primary key autoincrement not null, "tale_id" integer not null, "artist_id" integer not null, "type" varchar not null, "as" varchar, "nr" integer not null, "created_at" datetime, "updated_at" datetime, foreign key("tale_id") references "tales"("id") on delete restrict, foreign key("artist_id") references "artists"("id") on delete restrict);
CREATE TABLE IF NOT EXISTS "covers" ("filename" varchar not null, "placeholder" blob, "created_at" datetime, "updated_at" datetime, primary key ("filename"));
CREATE TABLE IF NOT EXISTS "photos" ("filename" varchar not null, "source" varchar, "width" integer, "height" integer, "crop" text not null, "placeholder" blob, "face_placeholder" blob, "created_at" datetime, "updated_at" datetime, "grayscale" tinyint(1) not null default '0', primary key ("filename"));
CREATE TABLE tales (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, slug VARCHAR(255) NOT NULL COLLATE "BINARY", title VARCHAR(255) NOT NULL COLLATE "BINARY", year INTEGER DEFAULT NULL, nr VARCHAR(255) DEFAULT NULL COLLATE "BINARY", cover_filename VARCHAR(255) DEFAULT NULL COLLATE "BINARY", notes CLOB DEFAULT NULL COLLATE "BINARY", created_at DATETIME DEFAULT NULL, updated_at DATETIME DEFAULT NULL, "discogs" integer);
CREATE TABLE artists (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, slug VARCHAR(255) NOT NULL COLLATE "BINARY", name VARCHAR(255) NOT NULL COLLATE "BINARY", genetivus VARCHAR(255) DEFAULT NULL COLLATE "BINARY", discogs INTEGER DEFAULT NULL, filmpolski INTEGER DEFAULT NULL, wikipedia VARCHAR(255) DEFAULT NULL COLLATE "BINARY", photo_filename VARCHAR(255) DEFAULT NULL COLLATE "BINARY", created_at DATETIME DEFAULT NULL, updated_at DATETIME DEFAULT NULL);
CREATE TABLE IF NOT EXISTS "monitored_scheduled_tasks" ("id" integer primary key autoincrement not null, "name" varchar not null, "type" varchar, "cron_expression" varchar not null, "timezone" varchar, "ping_url" varchar, "last_started_at" datetime, "last_finished_at" datetime, "last_failed_at" datetime, "last_skipped_at" datetime, "registered_on_oh_dear_at" datetime, "last_pinged_at" datetime, "grace_time_in_minutes" integer not null, "created_at" datetime, "updated_at" datetime);
CREATE TABLE IF NOT EXISTS "monitored_scheduled_task_log_items" ("id" integer primary key autoincrement not null, "monitored_scheduled_task_id" integer not null, "type" varchar not null, "meta" text, "created_at" datetime, "updated_at" datetime, foreign key("monitored_scheduled_task_id") references "monitored_scheduled_tasks"("id") on delete cascade);
INSERT INTO migrations VALUES(1,'2014_10_12_000000_create_users_table',1);
INSERT INTO migrations VALUES(2,'2018_08_08_100000_create_telescope_entries_table',1);
INSERT INTO migrations VALUES(3,'2019_08_21_175058_create_artists_table',1);
INSERT INTO migrations VALUES(4,'2019_08_21_175137_create_tales_table',1);
INSERT INTO migrations VALUES(5,'2019_08_21_180511_create_tales_actors_table',1);
INSERT INTO migrations VALUES(6,'2020_08_04_213320_create_failed_jobs_table',1);
INSERT INTO migrations VALUES(7,'2020_11_15_165809_create_credits_table',1);
INSERT INTO migrations VALUES(8,'2020_12_20_215944_create_covers_table',1);
INSERT INTO migrations VALUES(9,'2020_12_20_232934_create_cover_filename_column_in_tales_table',1);
INSERT INTO migrations VALUES(10,'2020_12_20_235657_create_photos_table',1);
INSERT INTO migrations VALUES(11,'2020_12_21_000043_create_photo_filename_column_in_artists_table',1);
INSERT INTO migrations VALUES(12,'2020_12_21_133713_remove_imgage_related_columns',1);
INSERT INTO migrations VALUES(13,'2020_12_21_182116_add_discogs_column_to_tales_table',1);
INSERT INTO migrations VALUES(14,'2021_03_10_181619_add_grayscale_column_to_photos_table',1);
INSERT INTO migrations VALUES(15,'2021_05_02_192236_drop_imdb_column',1);
INSERT INTO migrations VALUES(16,'2021_10_13_034330_create_schedule_monitor_tables',1);
